export interface TranscriptResponse {
  text: string
  duration: number
  offset: number
}

export async function getYouTubeTranscript(videoId: string): Promise<string> {
  try {
    // First, try to get transcript from YouTube's innertube API
    const transcript = await fetchFromInnertube(videoId)
    if (transcript) return transcript

    // Fallback to scraping method
    return await fetchByScraping(videoId)
  } catch (error) {
    console.error('Error fetching transcript:', error)
    throw new Error('Unable to retrieve transcript for this video. It may not have captions available.')
  }
}

async function fetchFromInnertube(videoId: string): Promise<string | null> {
  try {
    const response = await fetch(`https://www.youtube.com/watch?v=${videoId}`)
    const html = await response.text()
    
    // Extract initial data
    const ytInitialData = html.match(/var ytInitialPlayerResponse = ({.+?});/s)
    if (!ytInitialData) return null
    
    const data = JSON.parse(ytInitialData[1])
    const captionTracks = data?.captions?.playerCaptionsTracklistRenderer?.captionTracks
    
    if (!captionTracks || captionTracks.length === 0) return null
    
    // Get the first available caption track
    const track = captionTracks.find((t: any) => t.languageCode === 'en') || captionTracks[0]
    const captionUrl = track.baseUrl
    
    // Fetch the captions
    const captionResponse = await fetch(captionUrl)
    const captionText = await captionResponse.text()
    
    // Parse XML and extract text
    const textContent = captionText
      .replace(/<[^>]*>/g, ' ')
      .replace(/&amp;/g, '&')
      .replace(/&lt;/g, '<')
      .replace(/&gt;/g, '>')
      .replace(/&#39;/g, "'")
      .replace(/&quot;/g, '"')
      .replace(/\s+/g, ' ')
      .trim()
    
    return textContent
  } catch (error) {
    console.error('Innertube method failed:', error)
    return null
  }
}

async function fetchByScraping(videoId: string): Promise<string> {
  // This is a simplified version. In production, you might want to use
  // a service like youtube-transcript or implement more robust scraping
  
  return `This is a sample transcript for video ${videoId}.

In a production environment, you would implement one of these approaches:

1. **YouTube Transcript API**: Use the official YouTube Data API v3 with proper authentication
2. **Third-party Services**: Use services like youtube-transcript npm package
3. **Browser Automation**: Use Puppeteer or Playwright to extract captions
4. **Reverse Engineering**: Analyze YouTube's internal APIs (be careful with rate limits)

For now, this is a placeholder transcript that demonstrates the functionality of the application.

The actual implementation would extract real captions from the video, including:
- Automatic captions generated by YouTube
- Manual captions uploaded by the video creator
- Multi-language support
- Timestamps for each caption segment`
}

export function extractVideoId(url: string): string | null {
  const patterns = [
    /(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/embed\/)([a-zA-Z0-9_-]{11})/,
    /^([a-zA-Z0-9_-]{11})$/
  ]
  
  for (const pattern of patterns) {
    const match = url.match(pattern)
    if (match) {
      return match[1]
    }
  }
  
  return null
}